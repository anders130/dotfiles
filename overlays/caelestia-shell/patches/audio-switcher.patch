diff --git a/modules/bar/components/StatusIcons.qml b/modules/bar/components/StatusIcons.qml
index 839a61a..23acf44 100644
--- a/modules/bar/components/StatusIcons.qml
+++ b/modules/bar/components/StatusIcons.qml
@@ -1,6 +1,7 @@
 pragma ComponentBehavior: Bound
 
 import qs.components
+import qs.components.controls
 import qs.services
 import qs.utils
 import qs.config
@@ -15,6 +16,7 @@ StyledRect {
 
     property color colour: Colours.palette.m3secondary
     readonly property alias items: iconColumn
+    property bool isHeadphonesIcon: false
 
     color: Colours.tPalette.m3surfaceContainer
     radius: Appearance.rounding.full
@@ -108,10 +110,23 @@ StyledRect {
             name: "audio"
             active: Config.bar.status.showAudio
 
-            sourceComponent: MaterialIcon {
-                animate: true
-                text: Icons.getVolumeIcon(Audio.volume, Audio.muted)
-                color: root.colour
+            sourceComponent: CustomMouseArea {
+                id: audioArea
+
+                implicitWidth: icon.implicitWidth
+                implicitHeight: icon.implicitHeight
+
+                hoverEnabled: false
+
+                onClicked: Audio.toggleAudioPort()
+
+                MaterialIcon {
+                    id: icon
+                    anchors.centerIn: parent
+                    animate: true
+                    text: Audio.isHeadphonesIcon ? "headphones" : "speaker"
+                    color: root.colour
+                }
             }
         }
 
diff --git a/services/Audio.qml b/services/Audio.qml
index e638af5..6e13c4f 100644
--- a/services/Audio.qml
+++ b/services/Audio.qml
@@ -4,10 +4,30 @@ import qs.config
 import Caelestia
 import Quickshell
 import Quickshell.Services.Pipewire
+import QtQuick
+import Quickshell.Io
 
 Singleton {
     id: root
 
+    Process {
+        id: audioPortProcess
+        command: ["pactl", "list", "sinks"]
+        stdout: StdioCollector {
+            onStreamFinished: {
+                if (text.includes("Active Port: analog-output-headphones")) {
+                    isHeadphonesIcon = true;
+                } else if (text.includes("Active Port: analog-output-lineout")) {
+                    isHeadphonesIcon = false;
+                }
+            }
+        }
+    }
+
+    function init() {
+        audioPortProcess.running = true;
+    }
+
     readonly property var nodes: Pipewire.nodes.values.reduce((acc, node) => {
         if (!node.isStream) {
             if (node.isSink)
@@ -74,6 +94,18 @@ Singleton {
         Pipewire.preferredDefaultAudioSource = newSource;
     }
 
+    property bool isHeadphonesIcon: false
+
+    function toggleAudioPort(): void {
+        const speakers = "analog-output-lineout";
+        const headphones = "analog-output-headphones";
+
+        const newPort = root.isHeadphonesIcon ? speakers : headphones;
+        root.isHeadphonesIcon = !root.isHeadphonesIcon;
+
+        Quickshell.execDetached(["pactl", "set-sink-port", "@DEFAULT_SINK@", newPort]);
+    }
+
     PwObjectTracker {
         objects: [...root.sinks, ...root.sources]
     }
@@ -94,4 +126,6 @@ Singleton {
 
         collector: collector
     }
+
+    Component.onCompleted: init()
 }
